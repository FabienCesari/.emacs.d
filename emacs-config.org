#+TITLE: Emacs Documented Configuration File.
#+OPTIONS: toc:4 h:4 

* Basic configuration
** Personal Informations
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Fabien Cesari"
      user-mail-address "fabien.cesari@gmail.com")
#+END_SRC

** Removing distractions 
   thanks to [[ http://bzg.fr/][Bastien Guerry]]. 
   #+BEGIN_SRC emacs-lisp
     ;;No splash screen
     (setq inhibit-startup-screen t)
     ;; Prevent the cursor from blinking
     (blink-cursor-mode 0)
     ;; Don't use messages that you don't read
     (setq initial-scratch-message "")
     (setq inhibit-startup-message t)
     ;; Don't let Emacs hurt your ears
     ;;(setq visible-bell t)
     
     ;; You need to set `inhibit-startup-echo-area-message' from the
     ;; customization interface:
     ;; M-x customize-variable RET inhibit-startup-echo-area-message RET
     ;; then enter your username
     (setq inhibit-startup-echo-area-message "guerry")
     
     ;; This is bound to f11 in Emacs 24.4
     ;;(toggle-frame-fullscreen) 
     
     (set-frame-parameter nil 'fullscreen 'fullboth)
     ;; Who use the bar to scroll?
     (scroll-bar-mode 0)
     
     ;;No toolbar
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     
     ;; You can also set the initial frame parameters
     ;; (setq initial-frame-alist
     ;;       '((menu-bar-lines . 0)
     ;;         (tool-bar-lines . 0)))
     
     
     ;; No mode line
     (defvar-local hidden-mode-line-mode nil)
     (defvar-local hide-mode-line nil)
     
     (define-minor-mode hidden-mode-line-mode
       "Minor mode to hide the mode-line in the current buffer."
       :init-value nil
       :global nil
       :variable hidden-mode-line-mode
       :group 'editing-basics
       (if hidden-mode-line-mode
           (setq hide-mode-line mode-line-format
                 mode-line-format nil)
         (setq mode-line-format hide-mode-line
               hide-mode-line nil))
       (force-mode-line-update)
       ;; Apparently force-mode-line-update is not always enough to
       ;; redisplay the mode-line
       (redraw-display)
       (when (and (called-interactively-p 'interactive)
                  hidden-mode-line-mode)
         (run-with-idle-timer
          0 nil 'message
          (concat "Hidden Mode Line Mode enabled.  "
                  "Use M-x hidden-mode-line-mode to make the mode-line appear."))))
     
     ;; Activate hidden-mode-line-mode
     ;;(hidden-mode-line-mode 1)
     
     ;; If you want to hide the mode-line in all new buffers
     ;;(add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)
     
     ;; Alternatively, you can paint your mode-line in White but then
     ;; you'll have to manually paint it in black again
     ;; (custom-set-faces
     ;;  '(mode-line-highlight ((t nil)))
     ;;  '(mode-line ((t (:foreground "white" :background "white"))))
     ;;  '(mode-line-inactive ((t (:background "white" :foreground "white")))))
     
     ;; A small minor mode to use a big fringe
     (defvar bzg-big-fringe-mode nil)
     (define-minor-mode bzg-big-fringe-mode
       "Minor mode to use big fringe in the current buffer."
       :init-value nil
       :global t
       :variable bzg-big-fringe-mode
       :group 'editing-basics
       (if (not bzg-big-fringe-mode)
           (set-fringe-style nil)
         (set-fringe-mode
          (/ (- (frame-pixel-width)
                (* 100 (frame-char-width)))
             2))))
     
     ;; Now activate this global minor mode
     (bzg-big-fringe-mode 1)
     
     ;; To activate the fringe by default and deactivate it when windows
     ;; are split vertically, uncomment this:
     ;; (add-hook 'window-configuration-change-hook
     ;;           (lambda ()
     ;;             (if (delq nil
     ;;                       (let ((fw (frame-width)))
     ;;                         (mapcar (lambda(w) (< (window-width w) fw))
     ;;                                 (window-list))))
     ;;                 (bzg-big-fringe-mode 0)
     ;;               (bzg-big-fringe-mode 1))))
     
     ;; Use a minimal cursor
     ;; (setq default-cursor-type 'hbar)
     
     ;; Get rid of the indicators in the fringe
     (mapcar (lambda(fb) (set-fringe-bitmap-face fb 'org-hide))
             fringe-bitmaps)
     
     ;; Set the color of the fringe
     ;;(custom-set-faces
      ;;'(fringe ((t (:background "white")))))
     
     ;;Background color
     (custom-set-faces
       '(default ((t (:background "black" :foreground "grey"))))
       '(fringe ((t (:background "black")))))
   #+END_SRC
   
** Loading stuffs
   #+BEGIN_SRC emacs-lisp
     ;;System load
     (add-to-list 'load-path "/opt/local/share/emacs/site-lisp")
     (add-to-list 'load-path "/usr/share/emacs/site-lisp/elib/")
     ;;User load
     (add-to-list 'load-path "~/.emacs.d/external/")
     (add-to-list 'load-path "~/.emacs.d/external/jdee-2.4.1/lisp")
     (add-to-list 'load-path "~/.emacs.d/external/cc-mode-5.32.5")
     (add-to-list 'load-path "~/.emacs.d/smarttabs")          
   #+END_SRC
   
** Emacs auto generated 
   #+BEGIN_SRC emacs-lisp
     (custom-set-variables
      ;; custom-set-variables was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(gdb-max-frames 100)
      '(global-subword-mode t)
      '(ido-enable-flex-matching t)
      '(ido-everywhere t)
      '(ido-mode (quote both) nil (ido))
      '(tool-bar-mode t))
     
     
     (set-face-attribute 'default nil :height 120)
     (custom-set-faces
      ;; custom-set-faces was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      )
   #+END_SRC

** Utilities: windowmove, keybindings, sudo save, etc.
 #+BEGIN_SRC emacs-lisp
     ;; change window focus with shift-arrows
     ;;(require 'windmove)
     (windmove-default-keybindings)
     (setq windmove-wrap-around t)
     (require 'buffer-move)
     
     ;;Key bindings
     (global-set-key (kbd "C-+") 'hs-toggle-hiding)
     
     (add-hook 'c-mode-common-hook   'hs-minor-mode)
     (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
     (add-hook 'java-mode-hook       'hs-minor-mode)
     (add-hook 'espresso-mode-hook   'hs-minor-mode)
     (add-hook 'lisp-mode-hook       'hs-minor-mode)
     (add-hook 'perl-mode-hook       'hs-minor-mode)
     (add-hook 'sh-mode-hook         'hs-minor-mode)
     
     (global-set-key (kbd "<C-S-up>")     'buf-move-up)
     (global-set-key (kbd "<C-S-donw>")   'buf-move-down)
     (global-set-key (kbd "<C-S-left>")   'buf-move-left)
     (global-set-key (kbd "<C-S-right>")  'buf-move-right)
     
     ;;; I prefer cmd key for meta
     (setq mac-command-modifier 'meta)
     (setq mac-right-option-modifier nil)
     
     ;;Sudo save
     (require 'sudo-save)
     
     ;;Multi term
     (require 'multi-term)
     (setq multi-term-program "/bin/zsh")
     
     ;;tramp
     (require 'tramp)
     (setq tramp-default-method "ftp")
     
     ;;tempo mode
     (load "tempo")
     
     ;;Git & Svn
     (require 'psvn)
     ;;(add-to-list 'load-path "~/.emacs.d/external/git/")
     ;;(require 'git)
     
     ;;Magit
     (add-to-list 'load-path "~/.emacs.d/external/git-modes")
     (add-to-list 'load-path "~/.emacs.d/external/magit")
     (eval-after-load 'info
       '(progn (info-initialize)
               (add-to-list 'Info-directory-list "external/magit/")))
     (require 'magit)
     
     
   #+END_SRC

** Custom formating

#+BEGIN_SRC emacs-lisp
  (load "cc-mode.el")
  (load "smart-tabs-mode.el")
  
  (setq c-basic-offset 4)
  (smart-tabs-insinuate 'c 'javascript)
  
  (setq c-default-style "linux"
            c-basic-offset 4)
  
  (smart-tabs-add-language-support c++ c++-mode-hook
        ((c-indent-line . c-basic-offset)
         (c-indent-region . c-basic-offset)))
  
  
#+END_SRC
   
   
* OS specific configuaration
** OSX key bindings
   #+BEGIN_SRC emacs-lisp
     ;;(setq mac-option-modifier 'none)
     ;;(setq mac-command-modifier 'meta)
     (when (eq system-type 'darwin)
       (setq mac-pass-command-to-system nil) )
   #+END_SRC
** exec path from shell
   #+BEGIN_SRC emacs-lisp
     (require 'exec-path-from-shell) ;; if not using the ELPA package
     (exec-path-from-shell-initialize)  
   #+END_SRC
     

* External plugins    
** ELPA -- package.el
   #+BEGIN_SRC emacs-lisp
     (when
         (load
          (expand-file-name "~/.emacs.d/external/package.el"))
       (package-initialize))
   #+END_SRC
   
** Doxymacs: Documentation shortcuts:
   C-c d ? will look up documentation for the symbol under the point.
   C-c d r will rescan your Doxygen tags file.
   C-c d f will insert a Doxygen comment for the next function.
   C-c d i will insert a Doxygen comment for the current file.
   C-c d ; will insert a Doxygen comment for a member variable on the current line (like M-;).
   C-c d m will insert a blank multi-line Doxygen comment.
   C-c d s will insert a blank single-line Doxygen comment.
   C-c d @ will insert grouping comments around the current region.

   #+BEGIN_SRC emacs-lisp
     (load "doxymacs")
      (load "xml-parse")
      (require 'doxymacs)
      (add-hook 'c-mode-common-hook'doxymacs-mode)
      (defun my-c-font-lock-doxy-html (limit)
        (while (re-search-forward "<.+?>" limit 'move)
          (let ((beg (match-beginning 0))
                (end (match-end 0)))
            (if (nth 4 (syntax-ppss beg))
                (when (nth 4 (syntax-ppss end))
                  (c-put-font-lock-face beg end 'font-lock-keyword-face))
              (goto-char end))))
        nil)
      (defun my-c-mode-common-hook ()
        (font-lock-add-keywords nil '((my-c-font-lock-doxy-html))))
      (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
   #+END_SRC

** Matlab from emacs
   #+BEGIN_SRC emacs-lisp
     ;;Matlab-emacs config
     ;; add repo to the pah.
     (setq load-path (append load-path(list "~/.emacs.d/external/matlab-emacs")))
     
     (autoload 'matlab-mode "matlab" "Enter MATLAB Mode." t)
     (setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist))
     (autoload 'matlab-shell "matlab" "Interactive MATLAB mode." t)
     
     ;; Customization:
     (setq matlab-indent-function t) ; if you want function bodies indented
     (setq matlab-verify-on-save-flag nil) ; turn off auto-verify on save
     (defun my-matlab-mode-hook ()
       (setq fill-column 76))                ; where auto-fill should wrap
     (add-hook 'matlab-mode-hook 'my-matlab-mode-hook)
     (defun my-matlab-shell-mode-hook ()
       '())
     (add-hook 'matlab-shell-mode-hook 'my-matlab-shell-mode-hook)
     
     ;; Turn off Matlab desktop
     (setq matlab-shell-command-switches '("-nojvm"))
   #+END_SRC

** Emacs CEDET
   #+BEGIN_SRC emacs-lisp     
     (require 'cedet)
     (add-to-list 'load-path "~/.emacs.d/external/cedet/")
     (load "~/.emacs.d/external/cedet/lisp/cedet/cedet.el")
     
     ;; Load CEDET.
     ;; See cedet/common/cedet.info for configuration details.
     ;; IMPORTANT: For Emacs >= 23.2, you must place this *before* any
     ;; CEDET component (including EIEIO) gets activated by another 
     ;; package (Gnus, auth-source, ...).
     
     ;; Add further minor-modes to be enabled by semantic-mode.
     ;; See doc-string of `semantic-default-submodes' for other things
     ;; you can use here.
     (add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode t)
     (add-to-list 'semantic-default-submodes 'global-semantic-idle-completions-mode t)
     ;;(add-to-list 'semantic-default-submodes 'global-cedet-m3-minor-mode t)
     
     ;; Enable Semantic
     (semantic-mode 1)
     
     ;; Enable EDE (Project Management) features
     (global-ede-mode 1)
     
     ;; Configure arduino OS X dirs.
     ;;(setq ede-arduino-appdir "/Applications/Arduino.app/Contents/Resources/Java")
     
   #+END_SRC

** Autocomplete
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/external/autocomplete/")   
  (require 'auto-complete-config)
  (add-to-list 'ac-dictionary-directories "~/.emacs.d/external/autocomplete//ac-dict")
  (ac-config-default)
#+END_SRC
   
** nxhtml 
   #+BEGIN_SRC emacs-lisp
     
     (add-to-list 'load-path "~/.emacs.d/external/nxhtml/util")
     (load "~/.emacs.d/external/nxhtml/autostart.el")
     (setq
      nxhtml-global-minor-mode t
      mumamo-chunk-coloring 'submode-colored
      nxhtml-skip-welcome t
      indent-region-mode t
      rng-nxml-auto-validate-flag nil
      nxml-degraded t)
     (add-to-list 'auto-mode-alist '("\\.html\\.erb\\'" . eruby-nxhtml-mumamo))
   #+END_SRC
   
** MuMaMo: Multiple Major Mode, for rhtml files
#+BEGIN_SRC emacs-lisp     
  (require 'mumamo-fun)
  (setq mumamo-chunk-coloring 'submode-colored)
  (add-to-list 'auto-mode-alist '("\\.rhtml\\'" . eruby-html-mumamo))
  (add-to-list 'auto-mode-alist '("\\.html\\.erb\\'" . eruby-html-mumamo))
  
  (when (and (>= emacs-major-version 24) 
             (>= emacs-minor-version 2))
    (eval-after-load "mumamo"
      '(setq mumamo-per-buffer-local-vars
             (delq 'buffer-file-name mumamo-per-buffer-local-vars))))
  
  ;; Mumamo is making emacs 23.3 freak out:
  (when (and (equal emacs-major-version 23)
             (equal emacs-minor-version 3))
    (eval-after-load "bytecomp"
      '(add-to-list 'byte-compile-not-obsolete-vars
                    'font-lock-beginning-of-syntax-function))
    ;; tramp-compat.el clobbers this variable!
    (eval-after-load "tramp-compat"
      '(add-to-list 'byte-compile-not-obsolete-vars
                    'font-lock-beginning-of-syntax-function)))
#+END_SRC
** Ruby mode
   #+BEGIN_SRC emacs-lisp
     ;;(add-to-list 'load-path "~/.emacs.d/external/ruby-mode")
     ;;(require 'ruby-mode)
     ;;(require 'ruby-style)
     ;;(require 'ruby-electric)
     ;;(add-hook 'ruby-mode-hook 'ruby-electric-mode)
   #+END_SRC
   
** Emacs Rails (in fact rails reloaded)
   #+BEGIN_SRC emacs-lisp      
   ;;(setq load-path (cons (expand-file-name "~/.emacs.d/external/emacs-rails") load-path))
   ;;(require 'rails-autoload)      
   #+END_SRC
** RINARI - Rinari Is Not A Ruby IDE - Interactively Do Things (highly recommended, but not strictly required)   
   #+BEGIN_SRC emacs-lisp                   
    ;;(add-to-list 'load-path "~/.emacs.d/external/rinari")
    ;;(require 'rinari)
    ;;(setq rinari-tags-file-name "TAGS")
   #+END_SRC

** php Mode. byte compiled.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/external/php-mode")
     (require 'php-mode)
     (add-to-list 'auto-mode-alist '("\\.module$" . php-mode))
     (add-to-list 'auto-mode-alist '("\\.inc$" . php-mode))
     (add-to-list 'auto-mode-alist '("\\.install$" . php-mode))
     (add-to-list 'auto-mode-alist '("\\.engine$" . php-mode))
   #+END_SRC

** Spell checking
   #+BEGIN_SRC emacs-lisp
     (add-hook 'svn-log-edit-mode-hook
               '(lambda () "SVN log edit mode"
                  (flyspell-mode 1 )
                  (auto-fill-mode 0)))
     
     (autoload 'markdown-mode "markdown-mode.el"
       "Major mode for editing Markdown files" t)
     (setq auto-mode-alist (cons '("\\.mdt$" . markdown-mode) auto-mode-alist))
     (add-hook 'markdown-mode-hook 'turn-on-flyspell)
                                             ;(require 'tex)
     (load "auctex.el" nil t t)
     
     (require 'tex-site)
     ;;;; (if window-system (require 'font-latex))
     (add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
     (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
     (add-hook 'LaTeX-mode-hook 'turn-on-bib-cite)
     
     ;; spell
     (add-hook 'c-mode-common-hook 'flyspell-prog-mode)
     (global-set-key (kbd "C-$") 'flyspell-auto-correct-word)
     
     '(ispell-dictionary "en_GB-ise")
     '(ispell-program-name "aspell")
     '(flyspell-issue-message-flag nil)
     
     (let ((langs '("american" "francais")))
       (setq lang-ring (make-ring (length langs)))
       (dolist (elem langs) (ring-insert lang-ring elem)))
     
     (defun cycle-ispell-languages ()
       (interactive)
       (let ((lang (ring-ref lang-ring -1)))
         (ring-insert lang-ring lang)
         (ispell-change-dictionary lang)))
     
     ;; easy spell check
     (global-set-key [f6] 'cycle-ispell-languages)
     (global-set-key (kbd "<f8>") 'ispell-word)
     (global-set-key (kbd "C-S-<f8>") 'flyspell-mode)
     (global-set-key (kbd "C-M-<f8>") 'flyspell-buffer)
     (global-set-key (kbd "C-<f8>") 'flyspell-check-previous-highlighted-word)
     (defun flyspell-check-next-highlighted-word ()
       "Custom function to spell check next highlighted word"
       (interactive)
       (flyspell-goto-next-error)
       (ispell-word)
       )
     (global-set-key (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)
   #+END_SRC
** Processing
   #+BEGIN_SRC emacs-lisp
     (autoload 'processing-mode "processing-mode" "Processing mode" t)
     (add-to-list 'auto-mode-alist '("\\.pde$" . processing-mode))
     (setq processing-location "/usr/bin/processing-java")
     
   #+END_SRC
   
** Org-mode projects
   #+BEGIN_SRC emacs-lisp     
     
     ;; Set to the location of your Org files on your local system
     (setq org-directory "~/work/org")
     
     ;; Set to the name of the file where new notes will be stored
     (if (file-exists-p "~/work/org/flagged.org")
         (setq org-mobile-inbox-for-pull "~/work/org/flagged.org")
     )
     
     ;; Set to <your Dropbox root directory>/MobileOrg.
     (setq org-mobile-directory "~/Dropbox/Applications/MobileOrg")
     
     
     ;;Load agneda files. 
     (if (file-exists-p "~/work/org/agenda.org")
         (setq org-agenda-files (list "~/work/org/agenda.org"))
       )
     
     ;;LaTeX export
     (require 'ox-latex)
     (unless (boundp 'org-export-latex-classes)
       (setq org-export-latex-classes nil))
     (add-to-list 'org-export-latex-classes
                  '("article"
                    "\\documentclass{article}"
                    ("\\section{%s}" . "\\section*{%s}")))
     
     
     (require 'ox-publish)
     (setq org-publish-project-alist
           '(
             ;;Path to org files
             ("org-notes"
              :base-directory "~/work/website/org/"
              :base-extension "org"
              
              ;;Path to jekyll
              :publishing-directory "~/work/website/jekyll"
              :recursive t
              :publishing-function org-html-publish-to-html
              :headline-levels 4
              :body-only t
              )
             ("org-static"
              :base-directory "~/work/website/org/"
              :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
              :publishing-directory "~/work/website/jekyll/"
              :recursive t
              :publishing-function org-publish-attachment
              )                        
             ("org" :components ("org-notes" "org-static")) 
             ))
     
     (custom-set-variables
      ;; custom-set-variables was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right. 
      '(org-agenda-files (quote ("~/work/org/ical.org" "~/work/org/everything.org" "~/work/org/agenda.org"))) 
     )
   #+END_SRC

** Org-mode calendar config
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-modules 'org-mac-iCal)
  (setq org-agenda-include-diary t)
#+END_SRC
** Arduino Mode
   #+BEGIN_SRC emacs-lisp     
     (add-to-list 'load-path "~/.emacs.d/external/arduino-mode")
     (setq auto-mode-alist (cons '("\\.\\(pde\\|ino\\)$" . arduino-mode) auto-mode-alist))
     (autoload 'arduino-mode "arduino-mode" "Arduino editing mode." t)     
   #+END_SRC
   
** sudo save
   #+BEGIN_SRC emacs-lisp
     (require 'sudo-save)     
   #+END_SRC

** YAML Mode
   #+BEGIN_SRC emacs-lisp
     (require 'yaml-mode)
     (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
     
     (add-hook 'yaml-mode-hook
               '(lambda ()
                  (define-key yaml-mode-map "\C-m" 'newline-and-indent)))     
   #+END_SRC
   
** Graphviz - dot mode
   #+BEGIN_SRC emacs-lisp
     (load-file "~/.emacs.d/external/graphviz-dot-mode/graphviz-dot-mode.el")  
     (add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))      
   #+END_SRC
